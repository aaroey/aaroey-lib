"""""""""""""""""""""""""""""""" For vim-plug """"""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

if v:version >= 800
  " If nodejs and yarn is not installed use this one.
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
  "
  " Otherwise if nodejs and yarn is installed (in mac use brew), do:
  " Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
  "
  " Also see https://github.com/iamcco/markdown-preview.nvim/issues/16
endif

" https://github.com/lervag/vimtex
Plug 'lervag/vimtex'

" This is needed by ultisnips and must be put *BEFORE* ultisnips, not sure why.
" See https://github.com/SirVer/ultisnips/issues/512#issuecomment-238036845
Plug 'ervandew/supertab'

" https://github.com/SirVer/ultisnips
Plug 'SirVer/ultisnips'

" For code formatting. See https://github.com/google/vim-codefmt
if v:version >= 800
  Plug 'google/vim-maktaba'
  Plug 'google/vim-codefmt'
  Plug 'google/vim-glaive'
endif

" https://github.com/weynhamz/vim-plugin-minibufexpl
Plug 'techlivezheng/vim-plugin-minibufexpl'

Plug 'scrooloose/nerdtree'

Plug 'kien/ctrlp.vim'

Plug 'vim-scripts/a.vim'

Plug 'vim-scripts/AnsiEsc.vim'

call plug#end()

"""""""""""""""""""""""""""""""" For codefmt """""""""""""""""""""""""""""""""""
if v:version >= 800
  " the glaive#Install() should go after the `call plug#end()`
  call glaive#Install()
  " Optional: Enable codefmt's default mappings on the <Leader>= prefix.
  Glaive codefmt plugin[mappings]
  nnoremap ,fc ::FormatCode<CR>:w<CR>

  " Use -style=file to load style configuration from .clang-format file located
  " in one of the parent directories of the source file. Examples:
  " :!clang-format -i -style=file %:p
  " nnoremap ,cl :%!clang-format -style="{BasedOnStyle: Google, DerivePointerAlignment: false, PointerAlignment: Left, BinPackArguments: false, BinPackParameters: false, AllowAllParametersOfDeclarationOnNextLine: true, PenaltyBreakBeforeFirstCallParameter: 0}"<CR><CR>
  nnoremap ,cl :%!clang-format<CR><CR>
endif

""""""""""""""""""""""""""""""" Basic settings """""""""""""""""""""""""""""""""
" Automatically change the working directory to the current one
set autochdir
" Alternative solution:
" au BufEnter * silent! lcd %:p:h

set autoindent

set autoread

if has('mac')
  set clipboard=
else
  set clipboard=unnamedplus      " Yank to the X window clipboard. Only in Vim 7.3.74+.
  " set clipboard+=unnamed         " Yank to the clipboard (Vim7.2)
endif

set expandtab
" set history=65536

" Highlight previous search results
set hlsearch

" Do incremental searching
set incsearch

" For Split screen users: higlight the status line of the active window
set laststatus=2                " Always display the last status

set matchpairs=(:),{:},[:],<:>
set nrformats=alpha,octal,hex
set number
set shiftwidth=2                " Force this again although it may have been done before
set showcmd
set showmatch                   " Show matching braces / brackets
set showmode                    " Show the mode you're currently in
set softtabstop=2               " Make tabs act like spaces for editing ops
set tabstop=2
set textwidth=80
set title                       " Let vim change my tab/window title
set wildmode=longest,list,full  " Completion modes for wildcard expansion
set colorcolumn=81
set wildignorecase              " Ignore case for file/dir completion
set cursorline
" set cursorcolumn  " Very hard to read.

" hi CursorLine   cterm=NONE ctermbg=darkgray ctermfg=NONE "guibg=lightgrey guifg=white
" hi CursorColumn cterm=NONE ctermbg=darkgray ctermfg=NONE "guibg=lightgrey guifg=white

" set statusline=%F%m%r%h%w\ \ -\ \ [ASCII]\ \%03.3b\ \ -\ \ [HEX]\ \%02.2B\ \ -\ \ [LEN]\ %L\ \ -\ \ %03l,\ %03v\ \ -\ \ %p%%
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v]\ [%p%%]\ [LEN=%L]
set statusline=%F%m%r%h%w\ \ -\ \ [LEN]\ %L\ \ -\ \ %l,\ %v\ \ -\ \ %p%%

filetype on
filetype plugin on
filetype plugin indent on
filetype indent on

syntax enable
syntax on

" Store/resume view setting
au BufWinLeave ?* silent mkview  " '?' stands for any single character
au BufWinEnter ?* silent loadview

" Function to permanently delete views created by 'mkview'
function! MyDeleteView()
  let path = fnamemodify(bufname('%'),':p')
  " vim's odd =~ escaping for /
  let path = substitute(path, '=', '==', 'g')
  if empty($HOME)
  else
    let path = substitute(path, '^'.$HOME, '\~', '')
  endif
  let path = substitute(path, '/', '=+', 'g') . '='
  " view directory
  let path = &viewdir.'/'.path
  call delete(path)
  echo "Deleted: ".path
endfunction

" This is not enough: when closing the window `mkview` will restore everything!
" TODO(laigd): fix that!
nnoremap ,dv :call MyDeleteView()<CR>

au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" Forcing vimdiff to wrap lines
au VimEnter * if &diff | execute 'windo set wrap' | endif

colorscheme koehler

" For Split screen users: higlight the status line of the active window
" This MUST be set after setting colorscheme!!!
" previous is Cyan
hi StatusLine ctermfg=yellow ctermbg=blue
hi StatusLineNC ctermfg=59 ctermbg=145

noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

" Use 119 for the nerd tree.
noremap ,v :86vs<CR><C-L>
noremap ,r :vertical resize 86<CR>
noremap ,sp :set paste<CR>
noremap ,so :source ~/.vimrc<CR>
noremap ,snp :set nopaste<CR>
noremap ,do :diffoff<CR>:set foldcolumn=0<CR>:set nocrb<CR>:set noscb<CR>
noremap ,ds wbyw:r !date -d@<C-R>0 "+\%Y-\%m-\%d \%H:\%M:\%S"<CR>
noremap ,jc wbi{@code <ESC>ea}<ESC>
noremap ,dms wbyw:r !date -d@$(echo <C-R>0/1000 \| bc) "+\%Y-\%m-\%d \%H:\%M:\%S"<CR>
noremap ,dus wbyw:r !date -d@$(echo <C-R>0/1000000 \| bc) "+\%Y-\%m-\%d \%H:\%M:\%S"<CR>
noremap ,dns wbyw:r !date -d@$(echo <C-R>0/1000000000 \| bc) "+\%Y-\%m-\%d \%H:\%M:\%S"<CR>

"""""""""""""""""""""""""""""" For writing blog """"""""""""""""""""""""""""""""
" For mathjax
noremap ,{ wbi{<ESC>ea}<ESC>
noremap ,[ wbi[<ESC>ea]<ESC>
noremap ,( wbi(<ESC>ea)<ESC>
noremap ,< wbi<<ESC>ea><ESC>
noremap ," wbi"<ESC>ea"<ESC>
noremap ,' wbi'<ESC>ea'<ESC>
noremap ,` wbi`<ESC>ea`<ESC>
noremap ,$ wbi\\(<ESC>ea\\)<ESC>

" let mapleader=','  " Will probably conflict with the noremaps above.

" For latex
function! ConvertTexToPng()
  let fpath = expand('%:p')
  let pdf = substitute(fpath, '.tex', '.pdf', '')
  let png = substitute(fpath, '.tex', '.png', '')
  exe '!convert -density 110' pdf '-quality 10' png
endfunction
noremap ,2p :exe ConvertTexToPng()<CR>

""""""""""""""""""""""""""""""""" For vimtex """""""""""""""""""""""""""""""""""

let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
" set conceallevel=1
" let g:tex_conceal='abdmg'

" Default for '_' is '-pdf' which is not compatible with fontspec package and
" Chinese fonts.
let g:vimtex_compiler_latexmk_engines = {
    \ '_'                : '-xelatex',
    \ 'pdflatex'         : '-pdf',
    \ 'dvipdfex'         : '-pdfdvi',
    \ 'lualatex'         : '-lualatex',
    \ 'xelatex'          : '-xelatex',
    \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
    \ 'context (luatex)' : '-pdf -pdflatex=context',
    \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
    \}

function! TexEnterEntered()
  let cur_line = getline('.')
  let cur_pos = getpos('.')[2]
  if cur_line =~ '^\s*\\LineComment{.*$'
    " For Chinese characters need to -1
    return "}\<CR>\\LineComment{"
  else
    return "\<CR>"
  endif
endfunction

" This needs to be set before it sets the filetype using the `au` cmd below.
au FileType tex inoremap <expr> <CR> TexEnterEntered()
au FileType tex setlocal indentexpr=

au BufNewFile,BufFilePre,BufRead *.tex set filetype=tex

"""""""""""""""""""""""""""""""" For UltiSnips """""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsSnippetDirectories = ['ultisnips', 'UltiSnips']
" Reload Ultisnips. Found by :call <C-d>
noremap ,ru :call UltiSnips#RefreshSnippets()<CR>

"""""""""""""""""""""""""""""""" For minibufexpl """""""""""""""""""""""""""""""
hi MBENormal               ctermfg=cyan
hi MBEChanged              ctermfg=magenta
" hi MBEVisibleNormal        ctermfg=red
" hi MBEVisibleChanged       ctermfg=magenta
" hi MBEVisibleActiveNormal  ctermfg=red cterm=bold
" hi MBEVisibleActiveChanged ctermfg=magenta
hi MBEVisibleNormal        ctermfg=red cterm=NONE
hi MBEVisibleChanged       ctermfg=red cterm=NONE
hi MBEVisibleActiveNormal  ctermfg=red
hi MBEVisibleActiveChanged ctermfg=red

""""""""""""""""""""""""""""""""" For nerdtree """""""""""""""""""""""""""""""""
" au vimenter * NERDTree
noremap ,nt :NERDTree<CR>
noremap ,ntc :NERDTreeClose<CR>

""""""""""""""""""""""""""""" For markdown-preview """""""""""""""""""""""""""""
if v:version >= 800
  " https://github.com/iamcco/markdown-preview.nvim

  " set to 1, nvim will open the preview window after entering the markdown buffer
  " default: 0
  let g:mkdp_auto_start = 0

  " set to 1, the nvim will auto close current preview window when change
  " from markdown buffer to another buffer
  " default: 1
  let g:mkdp_auto_close = 1

  " set to 1, the vim will refresh markdown when save the buffer or
  " leave from insert mode, default 0 is auto refresh markdown as you edit or
  " move the cursor
  " default: 0
  let g:mkdp_refresh_slow = 0

  " set to 1, the MarkdownPreview command can be use for all files,
  " by default it can be use in markdown file
  " default: 0
  let g:mkdp_command_for_global = 0

  " set to 1, preview server available to others in your network
  " by default, the server listens on localhost (127.0.0.1)
  " default: 0
  let g:mkdp_open_to_the_world = 0

  " use custom IP to open preview page
  " useful when you work in remote vim and preview on local browser
  " more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
  " default empty
  let g:mkdp_open_ip = ''

  " specify browser to open preview page
  " default: ''
  let g:mkdp_browser = ''

  " set to 1, echo preview page url in command line when open preview page
  " default is 0
  let g:mkdp_echo_preview_url = 0

  " a custom vim function name to open preview page
  " this function will receive url as param
  " default is empty
  let g:mkdp_browserfunc = ''

  " options for markdown render
  " mkit: markdown-it options for render
  " katex: katex options for math
  " uml: markdown-it-plantuml options
  " maid: mermaid options
  " disable_sync_scroll: if disable sync scroll, default 0
  " sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
  "   middle: mean the cursor position alway show at the middle of the preview page
  "   top: mean the vim top viewport alway show at the top of the preview page
  "   relative: mean the cursor position alway show at the relative positon of the preview page
  " hide_yaml_meta: if hide yaml metadata, default is 1
  let g:mkdp_preview_options = {
        \'mkit': {},
        \ 'katex': {},
        \ 'uml': {},
        \ 'maid': {},
        \ 'disable_sync_scroll': 0,
        \ 'sync_scroll_type': 'middle',
        \ 'hide_yaml_meta': 1
        \ }

  " use a custom markdown style must be absolute path
  let g:mkdp_markdown_css = ''

  " use a custom highlight style must absolute path
  let g:mkdp_highlight_css = ''

  " use a custom port to start server or random for empty
  let g:mkdp_port = ''

  " preview page title
  " ${name} will be replace with the file name
  let g:mkdp_page_title = '「${name}」'

  nmap ,mp <Plug>MarkdownPreview
  nmap ,mps <Plug>MarkdownPreviewStop
  nmap ,mpt <Plug>MarkdownPreviewToggle
endif

""""""""""""""""""""""""""""""""" Other tips """""""""""""""""""""""""""""""""""
" Examples of how to use <Plug>:
" nnoremap <Plug>(HelloWorld) :echo "hello world!"<CR>
" nmap s <Plug>(HelloWorld)

" Check system type:
" if has('mac')
"   Plug 'junegunn/vim-xmark'
" endif
" See https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation

" Other useful plugins:
" * http://blog.miskcoo.com/2017/05/vim-useful-plugins
"   - YouCompleteMe
"   - Jedi-Vim
"   - Vim-Latex
"   - Markdown-Preview
" * https://www.jiqizhixin.com/articles/19040101
" * https://castel.dev/post/lecture-notes-1/

" -----------------------------------------------------------------------------
" The following settings were originally added by lambda at Nov.20, 2012.
" -----------------------------------------------------------------------------

""""""""""""""""""""""""""""""""" For taglist """"""""""""""""""""""""""""""""""
" let Tlist_Show_One_File=1
" let Tlist_Exit_OnlyWindow=1
" let Tlist_Auto_Open=1
" nnoremap <silent> <F8> :TlistToggle<CR>

""""""""""""""""""""""""""""""" For winmanager """""""""""""""""""""""""""""""""
" let g:winManagerWindowLayout='FileExplorer|TagList'
" let g:winManagerWindowLayout='FileExplorer,BufExplorer|TagList'
" let g:winManagerWidth=40
" nnoremap <silent> <F8> :WMToggle<CR>
" nmap wm :WMToggle<cr>

""""""""""""""""""""""""""""""""" For cscope """""""""""""""""""""""""""""""""""
" set cscopequickfix=s-,c-,d-,i-,t-,e-
" nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
" nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
" nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

""""""""""""""""""""""""""""""" For minibuffer """""""""""""""""""""""""""""""""
" let g:miniBufExplMapCTabSwitchBufs=1
" let g:miniBufExplMapWindowNavVim=1
" let g:miniBufExplMapWindowNavArrows=1
" let g:miniBufExplorerMoreThanOne=0  " prevent window resize

"""""""""""""""""""""""""""""""""""" For A """""""""""""""""""""""""""""""""""""
" nnoremap <silent> <F12> :A<CR>
" nnoremap <silent> <F11> :AV<CR>

"""""""""""""""""""""""""""""""" For vimdiff """""""""""""""""""""""""""""""""""
" See this for colors:
" http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim?file=Xterm-color-table.png
" hi DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" hi DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" hi DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
" hi DiffText   cterm=bold ctermfg=10 ctermbg=20 gui=none guifg=bg guibg=Red

"""""""""""""""""""""""""""""""""""" Misc """"""""""""""""""""""""""""""""""""""
" set completeopt=longest,menu  " Auto completion
