global !p
import platform
import time


def color_code(color):
  if color == 'r':
    return '91'
  elif color == 'g':
    return '92'
  elif color == 'y':
    return '93'
  elif color == 'b':
    return '94'


def formatter():
  if platform.system() == "Darwin":
	  return 'yapf'
  return 'pyformat'

endglobal

# See https://misc.flogisoft.com/bash/tip_colors_and_formatting for bash color
# codes.
#
# _D_BOLD_END = "\033[21m"
# _DF_BLUE = "\033[94m"
# _DF_YELLOW = "\033[93m"
# _DF_END = "\033[39m"
# _DB_RED = "\033[41m"
# _DB_GREEN = "\033[42m"
# _DB_YELLOW = "\033[43m"
snippet ,dlogm "debug log utils" bA


_D_END = "\033[0m"
_D_BOLD = "\033[1m"
_DF_GREEN = "\033[92m"
_DF_RED = "\033[91m"
_DB_BLUE = "\033[44m"
_DB_END = "\033[49m"


def dcallinfo(frame=2, color=_DF_GREEN):
  from inspect import getframeinfo, stack
  import re
  if frame < 0:
    stack = stack()
    res = "======== Stack trace:\n"
    for frame in stack:
      caller = getframeinfo(frame[0])
      res += "%s:%s\n" % (re.sub(r".*google./", "",
                                 caller.filename), caller.lineno)
    return res + "> " + color
  caller = getframeinfo(stack()[frame][0])
  return "%s%s%s:%s%s%s > " % (_D_BOLD, _DB_BLUE,
                               caller.filename.split("/")[-1], caller.lineno,
                               _DB_END, color)


def dprint(*args, **kwargs):
  print(
      dcallinfo(frame=kwargs.pop('frame', 2)),
      # In python 2.x print is not a function and does not accept unpacked list
      # as argument.
      ' '.join(map(str, list(args) + [_D_END])))


def dwarn(msg, *args, **kwargs):
  logging.warning(
      dcallinfo(
          frame=kwargs.pop('frame', 2),
          color=kwargs.pop('color', _DF_GREEN)) + msg + _D_END,
      *args,
      **kwargs)
endsnippet

snippet dw "logging.warn" bA
dwarn(str($0))
endsnippet

snippet dr "logging.warn" bA
dwarn(str($0), color=_DF_RED)
endsnippet

snippet d- "logging.warn" bA
dwarn(("-" * 50) + str($0))
endsnippet

# dprint(`!p snip.rv = '1' + str(time.time()).split('.')[0][-5:]`, $0)
snippet dp "debug print" bA
dprint($0)
endsnippet

snippet "([rgyb])(-)?log" "colorful logging.warn" brA
logging.warning(f'\033[`!p
snip.rv = color_code(match.group(1))
`m`!p
if match.group(2) == '-':
  snip.rv = "' + ('=' * 50) + f'"
else:
  snip.rv = '='
`> $0\033[0m')
endsnippet

snippet "([rgyb])(-)?p" "colorful print" brA
print(f'\033[`!p
snip.rv = color_code(match.group(1))
`m`!p
if match.group(2) == '-':
  snip.rv = "' + ('=' * 50) + f'"
else:
  snip.rv = '='
`> $0\\033[0m')
endsnippet

snippet "((logging|print|f').*){" "Match {} in log/print" brA
`!p snip.rv = match.group(1)`{$1}
endsnippet

snippet ,{ "{}" iA
{$1}
endsnippet

snippet ,( "()" iA
($1)
endsnippet

snippet ,[ "[]" iA
[$1]
endsnippet

snippet "((# *)?todo)" "TODO" rA
# TODO(laigd): 
endsnippet

snippet ,pdb "pdb debug" bA
# `!p snip.rv = formatter()`: disable
import pdb; pdb.set_trace(); print(1)  # pylint: disable=all
# `!p snip.rv = formatter()`: enable
endsnippet

snippet ,stack "print current stacktrace" bA
# `!p snip.rv = formatter()`: disable
import traceback; print('\033[91m=> %s\033[0m' % (''.join(traceback.format_stack())))  # pylint: disable=all
# `!p snip.rv = formatter()`: enable
endsnippet

snippet ,ithstack "print the ith stacktrace" bA
# `!p snip.rv = formatter()`: disable
import traceback; print(traceback.extract_stack(limit=$0)[0])  # pylint: disable=all
# `!p snip.rv = formatter()`: enable
endsnippet

snippet ",(qq|exit)" "exit the program" brA
# `!p snip.rv = formatter()`: disable
import sys; sys.exit(1);  # pylint: disable=all
# `!p snip.rv = formatter()`: enable
endsnippet

snippet ,sl "sleep" bA
# `!p snip.rv = formatter()`: disable
import time; time.sleep($1);  # pylint: disable=all
# `!p snip.rv = formatter()`: enable
endsnippet

snippet ,wf "write to file" bA
with open('/tmp/$1', 'w') as f:
  f.write(str($2))
endsnippet

snippet ,inp "import numpy" bA
import numpy as np
endsnippet

snippet ,itf "import tensorflow" bA
import tensorflow as tf
tf = tf.compat.v1
tf.disable_eager_execution()
endsnippet

snippet ,t1 "print time" bA
# `!p snip.rv = formatter()`: disable
import datetime; mytime1 = datetime.datetime.now()  # pylint: disable=all
# `!p snip.rv = formatter()`: enable
endsnippet

snippet ,t2 "print time" bA
# `!p snip.rv = formatter()`: disable
import datetime; mytime2 = datetime.datetime.now()  # pylint: disable=all
print(f'\033[93m=> start: {mytime1} ; end: {mytime2} ; elapsed : {mytime2-mytime1}\033[0m');
# `!p snip.rv = formatter()`: enable
endsnippet
