# See https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt for the
# instructions.
#
# See http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm for
# valid math symbols in mathjax

snippet ,init "initialize the blogpost with template"
---
layout: post
title: $1
date: `!p
import datetime
if not snip.c:
  snip.rv = str(datetime.datetime.now())
`
categories:
    - 算法&数学
    - 数学&物理
    - 程序&设计
    - 人工智能
    - 编译原理
    - 系统&体系结构
    - 信息安全
    - 分布式计算
    - 历史&社会
    - 活着&生活
    - 文学
    - 未分类
    - 网络
    - 环境&配置
    - 经济&金融
tags:
    - Work in Progress
    - $3
---

{::comment} Not show line_numbers {:/comment}
{::options syntax_highlighter_opts="{default_lang: c++ \\}" /}

* TOC
{:toc}

$0
endsnippet

snippet ,q "question template" bA
> $1
  {: .lambda_question}
$0
endsnippet

snippet ,anc "hyperlink text" iA
<a name="${1}">$0</a>
endsnippet

snippet ,col "color text" iA
<span style="color: ${1:blue}">$2</span>$0
endsnippet

snippet ,ym "display math" iA
$$
${1:${VISUAL}}
$$
endsnippet

snippet ,m "inline math" iA
$$${1:${VISUAL}}$$$0
endsnippet

snippet ,code "rouge code block" iA
{% highlight ${1:c++} linenos %}
$0
{% endhighlight %}
endsnippet

snippet ",g(v?)([aAbBdDeEgGlLmMoOpPrRsStTxX])" "Greek character" irA
`!p
v = match.group(1)
c = match.group(2)
prefix = c
if v:
  prefix = 'var' + c
if c.lower() == 'a':
  snip.rv = '\\' + f'{prefix}lpha'
elif c.lower() == 'b':
  snip.rv = '\\' + f'{prefix}eta'
elif c.lower() == 'd':
  snip.rv = '\\' + f'{prefix}elta'
elif c.lower() == 'e':
  snip.rv = '\\' + f'{prefix}psilon'
elif c.lower() == 'g':
  snip.rv = '\\' + f'{prefix}amma'
elif c.lower() == 'l':
  snip.rv = '\\' + f'{prefix}ambda'
elif c.lower() == 'm':
  snip.rv = '\\' + f'{prefix}u'
elif c.lower() == 'o':
  snip.rv = '\\' + f'{prefix}mega'
elif c.lower() == 'p':
  snip.rv = '\\' + f'{prefix}hi'
elif c.lower() == 'r':
  snip.rv = '\\' + f'{prefix}ho'
elif c.lower() == 's':
  snip.rv = '\\' + f'{prefix}igma'
elif c.lower() == 't':
  snip.rv = '\\' + f'{prefix}heta'
elif c.lower() == 'x':
  snip.rv = '\\' + f'{prefix}i'
`
endsnippet

snippet ,ecl "epsilon-closure" iA
$$\epsilon{-}closure$$
endsnippet

################ Various types of brackets

snippet "(?<!,lr)\(" "(), where the ( is not prefixed with ,lr" irA
($1)
endsnippet

snippet "(?<!,lr)\[" "[], where the [ is not prefixed with ,lr" irA
[$1]
endsnippet

snippet "(?<!l|r|\\){" "{}, where the { is not prefixed with ,l or ,lr or \" irA
{$1}
endsnippet

snippet \{ "literal {} i.e. \{\}" iA
\\{$1\\}
endsnippet

################ Various types of stretchy brackets

snippet ,lr( "\left( $1 \right)" iA
\p{$1}
endsnippet

snippet ,lr[ "\left[ $1 \right]" iA
\bk{$1}
endsnippet

snippet ,lr{ "\left\\{ $1 \right\\}" iA
\br{$1}
endsnippet

snippet ,ip "inner product" iA
\iprod{${1:\boldsymbol{$2}}}{${3:\boldsymbol{$4}}}
endsnippet

snippet ,abs "|x|" iA
\abs{$1}
endsnippet

snippet ,norm "||x||" iA
\norm{${1:\boldsymbol{$2}}}
endsnippet

################ Blocks

snippet ,b{. "{ ... (multiple lines)" iA
\left\\{
  $1
\right.
endsnippet

snippet ,bay "begin{array} / end{array}" iA
\begin{array}{l}
  $1
\end{array}
endsnippet

snippet ,bal "begin{} / end{}" iA
\begin{${1:align}}
  $2
\end{$1}
endsnippet

################ 

snippet ... "..." iA
\cdots
endsnippet

snippet ,sum "sum" iA
\sum_{${1}}^{${2:n}}
endsnippet

snippet ,prod "prod" iA
\prod_{${1}}^{${2:n}}
endsnippet

snippet ,int "integral" iA
\int_{$1}^{$2}
endsnippet

snippet ,lim "limit" iA
\lim_{${1}\to ${2:\infty}}
endsnippet

snippet ,d "derivative operator" iA
\d
endsnippet

snippet ,pd "partial derivative operator" iA
\pd
endsnippet

snippet "([^ _])_" "subscript" irA
`!p snip.rv = match.group(1)`_{$1}
endsnippet

snippet "([^ ])\^" "superscript" irA
`!p snip.rv = match.group(1)`^{$1}
endsnippet

snippet ,> "right arrow" iA
\to
endsnippet

snippet ,< "left arrow" iA
\leftarrow
endsnippet

snippet ,ol "over line" iA
\overline{$1}
endsnippet

snippet ,o> "over right arrow" iA
\overrightarrow{$1}
endsnippet

snippet ,o< "over left arrow" iA
\overleftarrow{$1}
endsnippet

snippet ,=> "implies" iA
\implies $0
endsnippet

snippet ,=< "implied by" iA
\impliedby $0
endsnippet

snippet ,/ "fraction" iA
\frac{$1}{$2}
endsnippet

################ Images

snippet ,img "insert image" iA
![$1]({{ site.url }}/assets/`!p snip.rv = snip.basename + '/' + t[1] + '.png'`)
endsnippet

# Note: breaking <img ...> into multiple lines won't work.
snippet ,aimg "insert image aligned on the left" iA
<img src="{{ site.url }}/assets/`!p snip.rv = snip.basename + '/' + t[1] + '.png'`" alt="$1" style="margin: 4px; max-width: 5500px">
endsnippet

################ Fonts

snippet ",f(bb|bf|cal|frak|it|rm|scr|sf|tt)" "math fonts" irA
\math`!p snip.rv = match.group(1)`{$1}
endsnippet

snippet ,ftx "font used for regular text" iA
\text{$1}
endsnippet

snippet ,ftb "font used for bold text" iA
\textbf{$1}
endsnippet

snippet ,fd "font used for vectors" iA
\boldsymbol{$1}
endsnippet

################ Vector calculus related

snippet ,vip "inner product with vectors" iA
\viprod{$1}{$2}
endsnippet

snippet ,list "a list of scalars, starting from index 1" iA
\list{$1}{$2}
endsnippet

snippet ,vlist "a list of vectors, starting from index 1" iA
\vlist{$1}{$2}
endsnippet

################
