global !p
import time
endglobal

snippet ,main "main function" bA
int main(int argc, const char *argv[]) {
  $1
  return 0;
}
endsnippet

snippet ,test "Script for quick testing" bA
#include <cstdio>

#include <algorithm>
#include <iostream>

using std::cin;
using std::cout;
using std::endl;

int main(int argc, const char *argv[]) {
  $1
  return 0;
}
endsnippet

snippet "if "  "if statement" brA
if ($1) $2
endsnippet

snippet "for " "for statement" brA
for ($1) {
  $2
}
endsnippet

snippet "for([a-z_]+) " "for statement with single letter variable" brA
for (int `!p snip.rv = match.group(1)` = 0; `!p snip.rv = match.group(1)` < $1; ++`!p snip.rv = match.group(1)`) {
  $2
}
endsnippet

snippet "\) {" "Curly brackets" irA
) {
  $1
}
endsnippet

snippet ,[ "Square brackets" iA
[$1]
endsnippet

snippet ,( "Parentheses" iA
($1)
endsnippet

snippet vlog "VLOG" bA
VLOG(${1:1}) << 
endsnippet

snippet log "LOG" bA
LOG(${1:ERROR}) << 
endsnippet

# See https://misc.flogisoft.com/bash/tip_colors_and_formatting for bash color
# codes.
#
# [1m: bold
# [44m: blue background
# [49m: default background
# [92m: light-green foreground
# [0m: reset all
#
# #define MYLOGPREFIX(id) "\033[44m\033[1m" << (id) << "\033[49m > \033[92m"
# #define MYLOGSUFFIX "\033[0m"
# #define MYLOG(id) LOG(WARNING) << MYLOGPREFIX(#id)
snippet ,dlogm "#define helper macros for LOG" bA
#define MYLOGPREFIX "\033[1m\033[92m"
#define MYLOGSUFFIX "\033[0m"
#define MYLOG LOG(WARNING) << MYLOGPREFIX
#define MYDBG 1
endsnippet

# MYLOG(`!p snip.rv = str(time.time()).split('.')[0][-5:]`) << $1 << MYLOGSUFFIX;
snippet dlog "LOG" bA
MYLOG << $1 << MYLOGSUFFIX;
endsnippet

snippet d-log "LOG" bA
MYLOG << "-----------------------------> " << $1 << MYLOGSUFFIX;
endsnippet

snippet ifd "#if MYDBG" bA
#if MYDBG
$1
#endif
endsnippet

snippet ifnd "#if !MYDBG" bA
#if !MYDBG
$1
#endif
endsnippet

snippet "class " "class" brA
class $1 {
 public:
  $2
};
endsnippet

snippet todo "TODO" bA
// TODO(laigd): 
endsnippet

snippet inc "#include" bA
#include 
endsnippet

snippet ,v "std::vector" i
std::vector<$1> 
endsnippet

snippet ,m "std::map" i
std::map<$1> 
endsnippet

snippet ,up "std::unique_ptr" i
std::unique_ptr<$1> 
endsnippet

snippet ,um "std::unordered_map" i
std::unordered_map<$1> 
endsnippet
