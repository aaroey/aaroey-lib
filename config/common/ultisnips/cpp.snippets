global !p
import time

def color_code(color):
  if color == 'r':
    return '91'
  elif color == 'g':
    return '92'
  elif color == 'y':
    return '93'
  elif color == 'b':
    return '94'

endglobal

snippet ,main "main function" bA
int main(int argc, char** argv) {
  $0
  return 0;
}
endsnippet

snippet ,test "Script for quick testing" bA
#include <algorithm>
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

using std::cin;
using std::cout;
using std::endl;

namespace sc = std::chrono;

int main(int argc, char** argv) {
  $0
  return 0;
}
endsnippet

snippet #if  "if statement" bA
#if$0
#endif
endsnippet

snippet "if "  "if statement" brA
if ($0) 
endsnippet

snippet "for " "for statement" brA
for ($0) {
}
endsnippet

snippet "for([a-z_]+) " "for statement with single letter variable" brA
for (int `!p snip.rv = match.group(1)` = 0; `!p snip.rv = match.group(1)` < $0; ++`!p snip.rv = match.group(1)`) {
}
endsnippet

snippet foreach "for each statement" bA
for (const auto& i : $0) {
}
endsnippet

snippet "while " "while statement" brA
while ($0) {
}
endsnippet

snippet "\) {" "Curly brackets" irA
) {
  $0
}
endsnippet

snippet vlog "VLOG" bA
VLOG(${1:1}) << 
endsnippet

snippet log "LOG" bA
LOG(${1:ERROR}) << 
endsnippet

snippet "([rgyb])(-)?log" "colorful LOG(WARNING)" brA
LOG(WARNING) << "\033[`!p
snip.rv = color_code(match.group(1))
`m`!p
if match.group(2) == '-':
  snip.rv = '==============================================='
else:
  snip.rv = '='
`> " << $0 << "\033[0m";
endsnippet

# See https://misc.flogisoft.com/bash/tip_colors_and_formatting for bash color
# codes.
#
# [1m: bold
# [44m: blue background
# [49m: default background
# [91m: light-red foreground
# [92m: light-green foreground
# [93m: light-yellow foreground
# [94m: light-blue foreground
# [0m: reset all
#
# #define MYLOGPREFIX(id) "\033[44m\033[1m" << (id) << "\033[49m > \033[92m"
# #define MYLOGSUFFIX "\033[0m"
# #define MYLOG(id) LOG(WARNING) << MYLOGPREFIX(#id)
snippet ,dlogm "#define helper macros for LOG" bA

#define MYLOGPREFIX "\033[1m\033[92m"
#define MYLOGSUFFIX "\033[0m"
#define MYLOG LOG(WARNING) << MYLOGPREFIX
#define MYDASHLOG MYLOG << "-----------------------------> "
endsnippet

# MYLOG(`!p snip.rv = str(time.time()).split('.')[0][-5:]`) << $0 << MYLOGSUFFIX;
snippet dw "LOG(WARNING)" bA
MYLOG << $0 << MYLOGSUFFIX;
endsnippet

snippet d- "LOG(WARNING)" bA
MYDASHLOG << $0 << MYLOGSUFFIX;
endsnippet

snippet dp "printf" bA
printf(MYLOGPREFIX"$1"MYLOGSUFFIX"\n", $0);
endsnippet

snippet "class " "class" brA
class $0 {
 public:
};
endsnippet

snippet "struct " "struct" brA
struct $0 {
};
endsnippet

snippet "((// *)?todo)" "TODO" rA
// TODO(laigd): 
endsnippet

snippet "(inc|#in)" "#include" brA
#include "$0"
endsnippet

snippet ,[ "Square brackets" iA
[$0]
endsnippet

snippet ,( "Parentheses" iA
($0)
endsnippet

snippet ,sv "std::vector" iA
std::vector<$0> 
endsnippet

snippet ,sm "std::map" iA
std::map<$0> 
endsnippet

snippet ,ss "std::string" iA
std::string
endsnippet

snippet ,sup "std::unique_ptr" iA
std::unique_ptr<$0> 
endsnippet

snippet ,sum "std::unordered_map" iA
std::unordered_map<$0> 
endsnippet

snippet ,scnow "std::chrono now" iA
$0 = sc::steady_clock::now();
endsnippet

snippet ,scns "std::chrono duration in nanoseconds" iA
$1 = sc::duration_cast<sc::nanoseconds>(${2:end} - ${0:start}).count();
endsnippet

snippet ,wf "Example of reading/writing file" bA
#include <iostream>
#include <fstream>
std::ofstream myfile("${1:/tmp/a}");
myfile << ${0:"something..."};
myfile.close();
endsnippet

snippet ,gdb "gdb debug" bA
#include <csignal>
std::raise(SIGINT);
endsnippet
